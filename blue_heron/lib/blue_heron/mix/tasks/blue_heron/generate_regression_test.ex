defmodule Mix.Tasks.BlueHeron.GenerateRegressionTest do
  use Mix.Task

  def run([]) do
    fixtures = Path.wildcard("test/fixtures/**/*.pklg")

    for fixture <- fixtures do
      rootname = Path.basename(fixture) |> Path.rootname()
      test = Path.join(["test", "blue_heron", "regression", "#{rootname}_test.exs"])
      run([fixture, test])
    end
  end

  def run([pklgfile, testfile]) do
    log = BlueHeron.HCIDump.decode_file!(pklgfile)

    hci_events = for %{type: :HCI_EVENT_PACKET} = event <- log, do: event

    deserialised_events =
      for %{payload: pl} = log <- hci_events,
          do: {pl, BlueHeron.HCI.Deserializable.deserialize(pl), log}

    successful_hci_events = for {_, %{}, _} = successful <- deserialised_events, do: successful

    hci_event_tests =
      for {pl, data, log} <- successful_hci_events do
        pl_str = inspect(pl, base: :hex, limit: :infinity)

        """
        test \"#{log.tv_sec}.#{log.tv_us}\" do
          binary = #{pl_str}
          expected = #{inspect(data, limit: :infinity)}
          actual =  BlueHeron.HCI.Deserializable.deserialize(binary)
          assert match?(^expected, actual)
          assert(BlueHeron.HCI.Serializable.serialize(actual) == binary,
          \"\"\"
          Serializating failed.
          Got: \#{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
          Exp: \#{inspect(binary, base: :hex)}
          \"\"\")
        end
        """
      end

    hci_events = for %{type: :HCI_ACL_DATA_PACKET} = event <- log, do: event

    deserialised_acl =
      for %{payload: pl} = log <- hci_events do
        try do
          {pl, BlueHeron.ACL.deserialize(pl), log}
        catch
          _, _ -> :error
        end
      end

    successful_acl = for {_, %{}, _} = successful <- deserialised_acl, do: successful

    acl_data_tests =
      for {pl, data, log} <- successful_acl do
        pl_str = inspect(pl, base: :hex, limit: :infinity)

        """
        test \"#{log.tv_sec}.#{log.tv_us}\" do
          binary = #{pl_str}
          expected = #{inspect(data, limit: :infinity)}
          actual =  BlueHeron.ACL.deserialize(binary)
          assert match?(^expected, actual)
          assert BlueHeron.ACL.serialize(actual) == binary
        end
        """
      end

    test =
      """
      # THIS FILE WAS AUTOMATICALLY GENERATED BY #{pklgfile}
      defmodule BlueHeronRegressionTest do
        use ExUnit.Case

        describe "HCI_EVENT_PACKET" do
          #{Enum.join(hci_event_tests, "\n")}
        end

        describe "ACL Data" do
          #{Enum.join(acl_data_tests, "\n")}
        end
      end
      """
      |> Code.format_string!()

    File.write!(testfile, test)
    Mix.shell().info("Generated #{testfile}")
  end
end
