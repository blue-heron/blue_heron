# THIS FILE WAS AUTOMATICALLY GENERATED BY test/fixtures/btstack_govee_btled.pklg
defmodule BlueHeronRegressionTest do
  use ExUnit.Case

  describe "HCI_EVENT_PACKET" do
    test "1597079476.759177" do
      binary = <<0xE, 0x4, 0x3, 0x3, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 3,
        opcode: <<3, 12>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.760418" do
      binary = <<0xE, 0xC, 0x2, 0x1, 0x10, 0x0, 0x7, 0xB, 0x0, 0x7, 0x5D, 0x0, 0x22, 0x88>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<1, 16>>,
        return_parameters: %{
          hci_revision: 11,
          hci_version: 7,
          lmp_pal_subversion: 34850,
          lmp_pal_version: 7,
          manufacturer_name: 93,
          status: 0
        }
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.777342" do
      binary =
        <<0xE, 0xFC, 0x2, 0x14, 0xC, 0x0, 0x52, 0x54, 0x4B, 0x5F, 0x42, 0x54, 0x5F, 0x34, 0x2E,
          0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<20, 12>>,
        return_parameters: %{local_name: "RTK_BT_4.1", status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.783077" do
      binary =
        <<0xE, 0x44, 0x2, 0x2, 0x10, 0x0, 0xFF, 0xFF, 0xFF, 0x3, 0xFE, 0xFF, 0xFF, 0xFF, 0x3F,
          0xFF, 0xFF, 0x9F, 0xF3, 0xF, 0xE8, 0xFE, 0x3F, 0xF7, 0x8F, 0xFF, 0x1C, 0x0, 0x0, 0x0,
          0x61, 0xF7, 0xFF, 0xFF, 0x7F, 0x0, 0xE0, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<2, 16>>,
        return_parameters:
          <<0, 255, 255, 255, 3, 254, 255, 255, 255, 63, 255, 255, 159, 243, 15, 232, 254, 63,
            247, 143, 255, 28, 0, 0, 0, 97, 247, 255, 255, 127, 0, 224, 255, 255, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.784339" do
      binary = <<0xE, 0xA, 0x2, 0x9, 0x10, 0x0, 0x50, 0xA4, 0x81, 0x6, 0x4E, 0xE8>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<9, 16>>,
        return_parameters: <<0, 80, 164, 129, 6, 78, 232>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.785578" do
      binary = <<0xE, 0xB, 0x2, 0x5, 0x10, 0x0, 0x34, 0x3, 0xFF, 0x8, 0x0, 0x10, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<5, 16>>,
        return_parameters: <<0, 52, 3, 255, 8, 0, 16, 0>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.787950" do
      binary = <<0xE, 0xC, 0x2, 0x3, 0x10, 0x0, 0xFF, 0xFF, 0xFF, 0xFE, 0xDB, 0xFF, 0x7B, 0x87>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<3, 16>>,
        return_parameters: <<0, 255, 255, 255, 254, 219, 255, 123, 135>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.789190" do
      binary = <<0xE, 0x4, 0x2, 0x1, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<1, 12>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.790385" do
      binary = <<0xE, 0x4, 0x2, 0x56, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "V\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.791571" do
      binary = <<0xE, 0x4, 0x2, 0x18, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 12>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.792775" do
      binary = <<0xE, 0x4, 0x2, 0xF, 0x8, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<15, 8>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.795071" do
      binary = <<0xE, 0x4, 0x2, 0x24, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "$\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.796330" do
      binary = <<0xE, 0x4, 0x2, 0x13, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<19, 12>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.797585" do
      binary = <<0xE, 0x4, 0x2, 0x52, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "R\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.798783" do
      binary = <<0xE, 0x4, 0x2, 0x45, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "E\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.801107" do
      binary = <<0xE, 0x4, 0x2, 0x7A, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "z\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.802329" do
      binary = <<0xE, 0x4, 0x2, 0x1A, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<26, 12>>,
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.803567" do
      binary = <<0xE, 0x4, 0x2, 0x2F, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "/\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.804785" do
      binary = <<0xE, 0x4, 0x2, 0x5B, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "[\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.807170" do
      binary = <<0xE, 0x7, 0x2, 0x2, 0x20, 0x0, 0x1B, 0x0, 0x10>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<2, 32>>,
        return_parameters: %{
          acl_data_packet_length: 27,
          status: 0,
          total_num_acl_data_packets: 16
        }
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.808376" do
      binary = <<0xE, 0x4, 0x2, 0x6D, 0xC, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "m\f",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.809612" do
      binary = <<0xE, 0x5, 0x2, 0xF, 0x20, 0x0, 0x20>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<15, 32>>,
        return_parameters: %{status: 0, white_list_size: 32}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.812129" do
      binary = <<0xE, 0x4, 0x2, 0xB, 0x20, 0x0>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: "\v ",
        return_parameters: %{status: 0}
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.813845" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x99, 0x9D, 0x4D, 0xCA, 0xCF, 0xCE, 0x26, 0xE1>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 153, 157, 77, 202, 207, 206, 38, 225>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.816205" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x8F, 0x46, 0xBC, 0xD5, 0x44, 0x23, 0xDE, 0xEE>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 143, 70, 188, 213, 68, 35, 222, 238>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.817430" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x2E, 0xC0, 0xBF, 0x76, 0x17, 0xE0, 0x5F, 0x3B>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 46, 192, 191, 118, 23, 224, 95, 59>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.818657" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x1C, 0x8D, 0xC3, 0xE6, 0x8E, 0xC6, 0x61, 0x73>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 28, 141, 195, 230, 142, 198, 97, 115>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.820966" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x4F, 0xF4, 0x43, 0x9F, 0x24, 0xFA, 0xA1, 0xCB>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 79, 244, 67, 159, 36, 250, 161, 203>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.822180" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0xE2, 0x8F, 0x84, 0x93, 0xF1, 0x47, 0xC2, 0x49>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 226, 143, 132, 147, 241, 71, 194, 73>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.823385" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x2E, 0x9D, 0xD4, 0x28, 0x97, 0x4E, 0x6A, 0x14>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 46, 157, 212, 40, 151, 78, 106, 20>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.824567" do
      binary = <<0xE, 0xC, 0x2, 0x18, 0x20, 0x0, 0x2C, 0x52, 0xA9, 0xA0, 0x16, 0xA9, 0x54, 0x50>>

      expected = %BlueHeron.HCI.Event.CommandComplete{
        code: 14,
        num_hci_command_packets: 2,
        opcode: <<24, 32>>,
        return_parameters: <<0, 44, 82, 169, 160, 22, 169, 84, 80>>
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.836986" do
      binary = <<0xF, 0x4, 0x0, 0x2, 0xD, 0x20>>

      expected = %BlueHeron.HCI.Event.CommandStatus{
        code: 15,
        num_hci_command_packets: 2,
        opcode: "\r ",
        status: 0
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079476.854206" do
      binary =
        <<0x3E, 0x13, 0x1, 0x0, 0x10, 0x0, 0x0, 0x0, 0xAD, 0x1E, 0x9D, 0x38, 0xC1, 0xA4, 0x18,
          0x0, 0x4, 0x0, 0x48, 0x0, 0x0>>

      expected = %BlueHeron.HCI.Event.LEMeta.ConnectionComplete{
        code: 62,
        connection_handle: 16,
        connection_interval: 24,
        connection_latency: 4,
        master_clock_accuracy: 0,
        peer_address: 181_149_785_464_493,
        peer_address_type: 0,
        role: 0,
        status: 0,
        subevent_code: 1,
        supervision_timeout: 72
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079477.774324" do
      binary = <<0xF, 0x4, 0x0, 0x2, 0x6, 0x4>>

      expected = %BlueHeron.HCI.Event.CommandStatus{
        code: 15,
        num_hci_command_packets: 2,
        opcode: <<6, 4>>,
        status: 0
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end

    test "1597079477.803651" do
      binary = <<0x5, 0x4, 0x0, 0x10, 0x0, 0x16>>

      expected = %BlueHeron.HCI.Event.DisconnectionComplete{
        code: 5,
        connection_handle: 16,
        reason: 22,
        reason_name: nil,
        status: 0
      }

      actual = BlueHeron.HCI.Deserializable.deserialize(binary)
      assert match?(^expected, actual)

      assert(
        BlueHeron.HCI.Serializable.serialize(actual) == binary,
        """
        Serialization failed.
        Got: #{inspect(BlueHeron.HCI.Serializable.serialize(actual), base: :hex)}
        Exp: #{inspect(binary, base: :hex)}
        """
      )
    end
  end

  describe "ACL Data" do
    test "1597079476.854508" do
      binary = <<0x10, 0x0, 0x7, 0x0, 0x3, 0x0, 0x4, 0x0, 0x2, 0x9B, 0x6>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ExchangeMTURequest{client_rx_mtu: 1691, opcode: 2}
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079476.904050" do
      binary = <<0x10, 0x20, 0x7, 0x0, 0x3, 0x0, 0x4, 0x0, 0x3, 0x17, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ExchangeMTUResponse{opcode: 3, server_rx_mtu: 23}
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079476.904085" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x10, 0x1, 0x0, 0xFF, 0xFF, 0x0, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeRequest{
            ending_handle: 65535,
            opcode: 16,
            starting_handle: 1,
            uuid: 10240
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079476.963102" do
      binary =
        <<0x10, 0x20, 0x18, 0x0, 0x14, 0x0, 0x4, 0x0, 0x11, 0x6, 0x1, 0x0, 0x7, 0x0, 0x0, 0x18,
          0x8, 0x0, 0xB, 0x0, 0x1, 0x18, 0xC, 0x0, 0xE, 0x0, 0xA, 0x18>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByGroupTypeResponse.AttributeData{
                end_group_handle: 7,
                handle: 1,
                uuid: 6144
              },
              %BlueHeron.ATT.ReadByGroupTypeResponse.AttributeData{
                end_group_handle: 11,
                handle: 8,
                uuid: 6145
              },
              %BlueHeron.ATT.ReadByGroupTypeResponse.AttributeData{
                end_group_handle: 14,
                handle: 12,
                uuid: 6154
              }
            ],
            opcode: 17
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079476.963160" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x10, 0xF, 0x0, 0xFF, 0xFF, 0x0, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeRequest{
            ending_handle: 65535,
            opcode: 16,
            starting_handle: 15,
            uuid: 10240
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.23339" do
      binary =
        <<0x10, 0x20, 0x1A, 0x0, 0x16, 0x0, 0x4, 0x0, 0x11, 0x14, 0xF, 0x0, 0x16, 0x0, 0x10, 0x19,
          0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByGroupTypeResponse.AttributeData{
                end_group_handle: 22,
                handle: 15,
                uuid: 5_233_100_606_242_806_050_955_395_731_364_112
              }
            ],
            opcode: 17
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.23381" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x10, 0x17, 0x0, 0xFF, 0xFF, 0x0, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeRequest{
            ending_handle: 65535,
            opcode: 16,
            starting_handle: 23,
            uuid: 10240
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.82770" do
      binary =
        <<0x10, 0x20, 0x1A, 0x0, 0x16, 0x0, 0x4, 0x0, 0x11, 0x14, 0x17, 0x0, 0x1A, 0x0, 0x12,
          0x19, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByGroupTypeResponse.AttributeData{
                end_group_handle: 26,
                handle: 23,
                uuid: 5_233_100_606_242_806_050_955_395_731_364_114
              }
            ],
            opcode: 17
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.82810" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x10, 0x1B, 0x0, 0xFF, 0xFF, 0x0, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByGroupTypeRequest{
            ending_handle: 65535,
            opcode: 16,
            starting_handle: 27,
            uuid: 10240
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.142685" do
      binary = <<0x10, 0x20, 0x9, 0x0, 0x5, 0x0, 0x4, 0x0, 0x1, 0x10, 0x1B, 0x0, 0xA>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ErrorResponse{
            error: :attribute_not_found,
            handle: 27,
            opcode: 1,
            request_opcode: 16
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.142742" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x1, 0x0, 0x7, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 7,
            opcode: 8,
            starting_handle: 1,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.202705" do
      binary =
        <<0x10, 0x20, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x9, 0x7, 0x2, 0x0, 0x12, 0x3, 0x0, 0x0,
          0x2A, 0x4, 0x0, 0x2, 0x5, 0x0, 0x1, 0x2A, 0x6, 0x0, 0x2, 0x7, 0x0, 0x4, 0x2A>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 18,
                characteristic_value_handle: 3,
                handle: 2,
                uuid: 10752
              },
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 2,
                characteristic_value_handle: 5,
                handle: 4,
                uuid: 10753
              },
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 2,
                characteristic_value_handle: 7,
                handle: 6,
                uuid: 10756
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.202796" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x1, 0x0, 0x7, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 7,
            opcode: 8,
            starting_handle: 1,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.262893" do
      binary =
        <<0x10, 0x20, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x9, 0x7, 0x2, 0x0, 0x12, 0x3, 0x0, 0x0,
          0x2A, 0x4, 0x0, 0x2, 0x5, 0x0, 0x1, 0x2A, 0x6, 0x0, 0x2, 0x7, 0x0, 0x4, 0x2A>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 18,
                characteristic_value_handle: 3,
                handle: 2,
                uuid: 10752
              },
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 2,
                characteristic_value_handle: 5,
                handle: 4,
                uuid: 10753
              },
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 2,
                characteristic_value_handle: 7,
                handle: 6,
                uuid: 10756
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.262989" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x8, 0x0, 0xB, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 11,
            opcode: 8,
            starting_handle: 8,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.352715" do
      binary =
        <<0x10, 0x20, 0xD, 0x0, 0x9, 0x0, 0x4, 0x0, 0x9, 0x7, 0x9, 0x0, 0x20, 0xA, 0x0, 0x5,
          0x2A>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 32,
                characteristic_value_handle: 10,
                handle: 9,
                uuid: 10757
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.352745" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0xB, 0x0, 0xB, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 11,
            opcode: 8,
            starting_handle: 11,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.412848" do
      binary = <<0x10, 0x20, 0x9, 0x0, 0x5, 0x0, 0x4, 0x0, 0x1, 0x8, 0xB, 0x0, 0xA>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ErrorResponse{
            error: :attribute_not_found,
            handle: 11,
            opcode: 1,
            request_opcode: 8
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.412923" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0xC, 0x0, 0xE, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 14,
            opcode: 8,
            starting_handle: 12,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.473149" do
      binary =
        <<0x10, 0x20, 0xD, 0x0, 0x9, 0x0, 0x4, 0x0, 0x9, 0x7, 0xD, 0x0, 0x2, 0xE, 0x0, 0x50,
          0x2A>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 2,
                characteristic_value_handle: 14,
                handle: 13,
                uuid: 10832
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.473225" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0xF, 0x0, 0x16, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 22,
            opcode: 8,
            starting_handle: 15,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.533293" do
      binary =
        <<0x10, 0x20, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x9, 0x15, 0x10, 0x0, 0x12, 0x11, 0x0, 0x10,
          0x2B, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 18,
                characteristic_value_handle: 17,
                handle: 16,
                uuid: 5_233_100_606_242_806_050_955_395_731_368_720
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.533325" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x12, 0x0, 0x16, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 22,
            opcode: 8,
            starting_handle: 18,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.593407" do
      binary =
        <<0x10, 0x20, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x9, 0x15, 0x14, 0x0, 0x6, 0x15, 0x0, 0x11,
          0x2B, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 6,
                characteristic_value_handle: 21,
                handle: 20,
                uuid: 5_233_100_606_242_806_050_955_395_731_368_721
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.593462" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x16, 0x0, 0x16, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 22,
            opcode: 8,
            starting_handle: 22,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.652731" do
      binary = <<0x10, 0x20, 0x9, 0x0, 0x5, 0x0, 0x4, 0x0, 0x1, 0x8, 0x16, 0x0, 0xA>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ErrorResponse{
            error: :attribute_not_found,
            handle: 22,
            opcode: 1,
            request_opcode: 8
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.652780" do
      binary =
        <<0x10, 0x0, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x52, 0x15, 0x0, 0x33, 0x5, 0x2, 0xFF, 0x0,
          0x0, 0x0, 0xFF, 0x89, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xAF>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.WriteCommand{
            data: <<51, 5, 2, 255, 0, 0, 0, 255, 137, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175>>,
            handle: 21,
            opcode: 82
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.654038" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x17, 0x0, 0x1A, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 26,
            opcode: 8,
            starting_handle: 23,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.713824" do
      binary =
        <<0x10, 0x20, 0x1B, 0x0, 0x17, 0x0, 0x4, 0x0, 0x9, 0x15, 0x18, 0x0, 0x6, 0x19, 0x0, 0x12,
          0x2B, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeResponse{
            attribute_data: [
              %BlueHeron.ATT.ReadByTypeResponse.AttributeData{
                characteristic_properties: 6,
                characteristic_value_handle: 25,
                handle: 24,
                uuid: 5_233_100_606_242_806_050_955_395_731_368_722
              }
            ],
            opcode: 9
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.713854" do
      binary = <<0x10, 0x0, 0xB, 0x0, 0x7, 0x0, 0x4, 0x0, 0x8, 0x1A, 0x0, 0x1A, 0x0, 0x3, 0x28>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ReadByTypeRequest{
            ending_handle: 26,
            opcode: 8,
            starting_handle: 26,
            uuid: 10243
          }
        },
        flags: %{bc: 0, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end

    test "1597079477.773021" do
      binary = <<0x10, 0x20, 0x9, 0x0, 0x5, 0x0, 0x4, 0x0, 0x1, 0x8, 0x1A, 0x0, 0xA>>

      expected = %BlueHeron.ACL{
        data: %BlueHeron.L2Cap{
          cid: 4,
          data: %BlueHeron.ATT.ErrorResponse{
            error: :attribute_not_found,
            handle: 26,
            opcode: 1,
            request_opcode: 8
          }
        },
        flags: %{bc: 2, pb: 0},
        handle: 16
      }

      actual = BlueHeron.ACL.deserialize(binary)
      assert match?(^expected, actual)
      assert BlueHeron.ACL.serialize(actual) == binary
    end
  end
end
